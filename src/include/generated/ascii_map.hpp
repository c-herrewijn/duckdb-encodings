// !!!!!!!
// WARNING: this file is autogenerated by scripts/converter.py, manual changes will be overwritten
// !!!!!!!

#include "encoding_maps.hpp"
#include "duckdb/main/config.hpp"
#include "duckdb/function/encoding_function.hpp"

namespace duckdb {
namespace duckdb_encodings {


// Generated from: solaris-646-2.7.ucm
class AsciiToUtf {
	public:
	AsciiToUtf() {};
	const idx_t lookup_bytes = 1;
	const idx_t max_bytes_per_byte = 1;
	const string name = "Ascii";

	const map<vector<uint8_t>, vector<uint8_t>> ascii_to_utf8 = {
    { { 0x00 }, { 0x00 } },
    { { 0x01 }, { 0x01 } },
    { { 0x02 }, { 0x02 } },
    { { 0x03 }, { 0x03 } },
    { { 0x04 }, { 0x04 } },
    { { 0x05 }, { 0x05 } },
    { { 0x06 }, { 0x06 } },
    { { 0x07 }, { 0x07 } },
    { { 0x08 }, { 0x08 } },
    { { 0x09 }, { 0x09 } },
    { { 0x0A }, { 0x0A } },
    { { 0x0B }, { 0x0B } },
    { { 0x0C }, { 0x0C } },
    { { 0x0D }, { 0x0D } },
    { { 0x0E }, { 0x0E } },
    { { 0x0F }, { 0x0F } },
    { { 0x10 }, { 0x10 } },
    { { 0x11 }, { 0x11 } },
    { { 0x12 }, { 0x12 } },
    { { 0x13 }, { 0x13 } },
    { { 0x14 }, { 0x14 } },
    { { 0x15 }, { 0x15 } },
    { { 0x16 }, { 0x16 } },
    { { 0x17 }, { 0x17 } },
    { { 0x18 }, { 0x18 } },
    { { 0x19 }, { 0x19 } },
    { { 0x1A }, { 0x1A } },
    { { 0x1B }, { 0x1B } },
    { { 0x1C }, { 0x1C } },
    { { 0x1D }, { 0x1D } },
    { { 0x1E }, { 0x1E } },
    { { 0x1F }, { 0x1F } },
    { { 0x20 }, { 0x20 } },
    { { 0x21 }, { 0x21 } },
    { { 0x22 }, { 0x22 } },
    { { 0x23 }, { 0x23 } },
    { { 0x24 }, { 0x24 } },
    { { 0x25 }, { 0x25 } },
    { { 0x26 }, { 0x26 } },
    { { 0x27 }, { 0x27 } },
    { { 0x28 }, { 0x28 } },
    { { 0x29 }, { 0x29 } },
    { { 0x2A }, { 0x2A } },
    { { 0x2B }, { 0x2B } },
    { { 0x2C }, { 0x2C } },
    { { 0x2D }, { 0x2D } },
    { { 0x2E }, { 0x2E } },
    { { 0x2F }, { 0x2F } },
    { { 0x30 }, { 0x30 } },
    { { 0x31 }, { 0x31 } },
    { { 0x32 }, { 0x32 } },
    { { 0x33 }, { 0x33 } },
    { { 0x34 }, { 0x34 } },
    { { 0x35 }, { 0x35 } },
    { { 0x36 }, { 0x36 } },
    { { 0x37 }, { 0x37 } },
    { { 0x38 }, { 0x38 } },
    { { 0x39 }, { 0x39 } },
    { { 0x3A }, { 0x3A } },
    { { 0x3B }, { 0x3B } },
    { { 0x3C }, { 0x3C } },
    { { 0x3D }, { 0x3D } },
    { { 0x3E }, { 0x3E } },
    { { 0x3F }, { 0x3F } },
    { { 0x40 }, { 0x40 } },
    { { 0x41 }, { 0x41 } },
    { { 0x42 }, { 0x42 } },
    { { 0x43 }, { 0x43 } },
    { { 0x44 }, { 0x44 } },
    { { 0x45 }, { 0x45 } },
    { { 0x46 }, { 0x46 } },
    { { 0x47 }, { 0x47 } },
    { { 0x48 }, { 0x48 } },
    { { 0x49 }, { 0x49 } },
    { { 0x4A }, { 0x4A } },
    { { 0x4B }, { 0x4B } },
    { { 0x4C }, { 0x4C } },
    { { 0x4D }, { 0x4D } },
    { { 0x4E }, { 0x4E } },
    { { 0x4F }, { 0x4F } },
    { { 0x50 }, { 0x50 } },
    { { 0x51 }, { 0x51 } },
    { { 0x52 }, { 0x52 } },
    { { 0x53 }, { 0x53 } },
    { { 0x54 }, { 0x54 } },
    { { 0x55 }, { 0x55 } },
    { { 0x56 }, { 0x56 } },
    { { 0x57 }, { 0x57 } },
    { { 0x58 }, { 0x58 } },
    { { 0x59 }, { 0x59 } },
    { { 0x5A }, { 0x5A } },
    { { 0x5B }, { 0x5B } },
    { { 0x5C }, { 0x5C } },
    { { 0x5D }, { 0x5D } },
    { { 0x5E }, { 0x5E } },
    { { 0x5F }, { 0x5F } },
    { { 0x60 }, { 0x60 } },
    { { 0x61 }, { 0x61 } },
    { { 0x62 }, { 0x62 } },
    { { 0x63 }, { 0x63 } },
    { { 0x64 }, { 0x64 } },
    { { 0x65 }, { 0x65 } },
    { { 0x66 }, { 0x66 } },
    { { 0x67 }, { 0x67 } },
    { { 0x68 }, { 0x68 } },
    { { 0x69 }, { 0x69 } },
    { { 0x6A }, { 0x6A } },
    { { 0x6B }, { 0x6B } },
    { { 0x6C }, { 0x6C } },
    { { 0x6D }, { 0x6D } },
    { { 0x6E }, { 0x6E } },
    { { 0x6F }, { 0x6F } },
    { { 0x70 }, { 0x70 } },
    { { 0x71 }, { 0x71 } },
    { { 0x72 }, { 0x72 } },
    { { 0x73 }, { 0x73 } },
    { { 0x74 }, { 0x74 } },
    { { 0x75 }, { 0x75 } },
    { { 0x76 }, { 0x76 } },
    { { 0x77 }, { 0x77 } },
    { { 0x78 }, { 0x78 } },
    { { 0x79 }, { 0x79 } },
    { { 0x7A }, { 0x7A } },
    { { 0x7B }, { 0x7B } },
    { { 0x7C }, { 0x7C } },
    { { 0x7D }, { 0x7D } },
    { { 0x7E }, { 0x7E } },
    { { 0x7F }, { 0x7F } },
};
static void Decode(const char *source_buffer, idx_t &source_buffer_current_position,
                        const idx_t source_buffer_size, char *target_buffer, idx_t &target_buffer_current_position,
                        const idx_t target_buffer_size, char *remaining_bytes_buffer, idx_t &remaining_bytes_size) {
	for (; source_buffer_current_position < source_buffer_size; source_buffer_current_position++) {
		if (target_buffer_current_position == target_buffer_size) {
			// We are done
			return;
		}
		const unsigned char ch = static_cast<unsigned char>(source_buffer[source_buffer_current_position]);
		if (ch > 0x7F && ch <= 0x9F) {
			throw InvalidInputException("File is not latin-1 encoded");
		}
		if (ch <= 0x7F) {
			// ASCII: 1 byte in UTF-8
			target_buffer[target_buffer_current_position++] = static_cast<char>(ch);
		} else {
			// Non-ASCII: 2 bytes in UTF-8
			target_buffer[target_buffer_current_position++] = static_cast<char>(0xc2 + (ch > 0xbf));
			if (target_buffer_current_position == target_buffer_size) {
				// We are done, but we have to store one byte for the next chunk!
				source_buffer_current_position++;
				remaining_bytes_buffer[0] = static_cast<char>((ch & 0x3f) + 0x80);
				remaining_bytes_size = 1;
				return;
			}
			target_buffer[target_buffer_current_position++] = static_cast<char>((ch & 0x3f) + 0x80);
		}
	}
}

	void Register(DBConfig &config) {
		config.RegisterEncodeFunction({name, Decode, lookup_bytes, max_bytes_per_byte});
	}
};
} // namespace duckdb_encodings

} //namespace duckdb
