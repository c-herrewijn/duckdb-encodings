//===----------------------------------------------------------------------===//
//
//                         DuckDB - Encodings
//
// generated/ibm-1105_P100-2003_map.hpp
//
//
//===----------------------------------------------------------------------===//

// !!!!!!!
// WARNING: this file is autogenerated by scripts/converter.py, manual changes will be overwritten
// !!!!!!!

#pragma once

#include "duckdb/main/config.hpp"
#include "duckdb/function/encoding_function.hpp"
#include "generated_encoded_function.hpp"

namespace duckdb {
namespace duckdb_encodings {

class Ibm_1105_p100_2003ToUtf {
public:
	Ibm_1105_p100_2003ToUtf() {};
	const idx_t lookup_bytes = 1;
	const idx_t max_bytes_per_byte = 3;
	const string name = "ibm-1105_P100-2003";
	// Generated from: ibm-1105_P100-2003.ucm
	static constexpr map_entry ibm_1105_P100_2003_to_utf8[] = {
	    {1, "\x00", 1, "\x00"},         {1, "\x01", 1, "\x01"},         {1, "\x02", 1, "\x02"},
	    {1, "\x03", 1, "\x03"},         {1, "\x04", 1, "\x04"},         {1, "\x05", 1, "\x05"},
	    {1, "\x06", 1, "\x06"},         {1, "\x07", 1, "\x07"},         {1, "\x08", 1, "\x08"},
	    {1, "\x09", 1, "\x09"},         {1, "\x0A", 1, "\x0A"},         {1, "\x0B", 1, "\x0B"},
	    {1, "\x0C", 1, "\x0C"},         {1, "\x0D", 1, "\x0D"},         {1, "\x0E", 1, "\x0E"},
	    {1, "\x0F", 1, "\x0F"},         {1, "\x10", 1, "\x10"},         {1, "\x11", 1, "\x11"},
	    {1, "\x12", 1, "\x12"},         {1, "\x13", 1, "\x13"},         {1, "\x14", 1, "\x14"},
	    {1, "\x15", 1, "\x15"},         {1, "\x16", 1, "\x16"},         {1, "\x17", 1, "\x17"},
	    {1, "\x18", 1, "\x18"},         {1, "\x19", 1, "\x19"},         {1, "\x1A", 1, "\x1A"},
	    {1, "\x1B", 1, "\x1B"},         {1, "\x1C", 1, "\x1C"},         {1, "\x1D", 1, "\x1D"},
	    {1, "\x1E", 1, "\x1E"},         {1, "\x1F", 1, "\x1F"},         {1, "\x20", 1, "\x20"},
	    {1, "\x21", 3, "\xEF\xBC\x81"}, {1, "\x22", 3, "\xEF\xBC\x82"}, {1, "\x23", 3, "\xEF\xBC\x83"},
	    {1, "\x24", 3, "\xEF\xBC\x84"}, {1, "\x25", 3, "\xEF\xBC\x85"}, {1, "\x26", 3, "\xEF\xBC\x86"},
	    {1, "\x27", 3, "\xEF\xBC\x87"}, {1, "\x28", 3, "\xEF\xBC\x88"}, {1, "\x29", 3, "\xEF\xBC\x89"},
	    {1, "\x2A", 3, "\xEF\xBC\x8A"}, {1, "\x2B", 3, "\xEF\xBC\x8B"}, {1, "\x2C", 3, "\xEF\xBC\x8C"},
	    {1, "\x2D", 3, "\xEF\xBC\x8D"}, {1, "\x2E", 3, "\xEF\xBC\x8E"}, {1, "\x2F", 3, "\xEF\xBC\x8F"},
	    {1, "\x30", 3, "\xEF\xBC\x90"}, {1, "\x31", 3, "\xEF\xBC\x91"}, {1, "\x32", 3, "\xEF\xBC\x92"},
	    {1, "\x33", 3, "\xEF\xBC\x93"}, {1, "\x34", 3, "\xEF\xBC\x94"}, {1, "\x35", 3, "\xEF\xBC\x95"},
	    {1, "\x36", 3, "\xEF\xBC\x96"}, {1, "\x37", 3, "\xEF\xBC\x97"}, {1, "\x38", 3, "\xEF\xBC\x98"},
	    {1, "\x39", 3, "\xEF\xBC\x99"}, {1, "\x3A", 3, "\xEF\xBC\x9A"}, {1, "\x3B", 3, "\xEF\xBC\x9B"},
	    {1, "\x3C", 3, "\xEF\xBC\x9C"}, {1, "\x3D", 3, "\xEF\xBC\x9D"}, {1, "\x3E", 3, "\xEF\xBC\x9E"},
	    {1, "\x3F", 3, "\xEF\xBC\x9F"}, {1, "\x40", 2, "\xC3\x84"},     {1, "\x41", 3, "\xEF\xBC\xA1"},
	    {1, "\x42", 3, "\xEF\xBC\xA2"}, {1, "\x43", 3, "\xEF\xBC\xA3"}, {1, "\x44", 3, "\xEF\xBC\xA4"},
	    {1, "\x45", 3, "\xEF\xBC\xA5"}, {1, "\x46", 3, "\xEF\xBC\xA6"}, {1, "\x47", 3, "\xEF\xBC\xA7"},
	    {1, "\x48", 3, "\xEF\xBC\xA8"}, {1, "\x49", 3, "\xEF\xBC\xA9"}, {1, "\x4A", 3, "\xEF\xBC\xAA"},
	    {1, "\x4B", 3, "\xEF\xBC\xAB"}, {1, "\x4C", 3, "\xEF\xBC\xAC"}, {1, "\x4D", 3, "\xEF\xBC\xAD"},
	    {1, "\x4E", 3, "\xEF\xBC\xAE"}, {1, "\x4F", 3, "\xEF\xBC\xAF"}, {1, "\x50", 3, "\xEF\xBC\xB0"},
	    {1, "\x51", 3, "\xEF\xBC\xB1"}, {1, "\x52", 3, "\xEF\xBC\xB2"}, {1, "\x53", 3, "\xEF\xBC\xB3"},
	    {1, "\x54", 3, "\xEF\xBC\xB4"}, {1, "\x55", 3, "\xEF\xBC\xB5"}, {1, "\x56", 3, "\xEF\xBC\xB6"},
	    {1, "\x57", 3, "\xEF\xBC\xB7"}, {1, "\x58", 3, "\xEF\xBC\xB8"}, {1, "\x59", 3, "\xEF\xBC\xB9"},
	    {1, "\x5A", 3, "\xEF\xBC\xBA"}, {1, "\x5B", 2, "\xC3\x86"},     {1, "\x5C", 2, "\xC3\x98"},
	    {1, "\x5D", 2, "\xC3\x85"},     {1, "\x5E", 2, "\xC3\x9C"},     {1, "\x5F", 3, "\xEF\xBC\xBF"},
	    {1, "\x60", 2, "\xC3\xA4"},     {1, "\x61", 3, "\xEF\xBD\x81"}, {1, "\x62", 3, "\xEF\xBD\x82"},
	    {1, "\x63", 3, "\xEF\xBD\x83"}, {1, "\x64", 3, "\xEF\xBD\x84"}, {1, "\x65", 3, "\xEF\xBD\x85"},
	    {1, "\x66", 3, "\xEF\xBD\x86"}, {1, "\x67", 3, "\xEF\xBD\x87"}, {1, "\x68", 3, "\xEF\xBD\x88"},
	    {1, "\x69", 3, "\xEF\xBD\x89"}, {1, "\x6A", 3, "\xEF\xBD\x8A"}, {1, "\x6B", 3, "\xEF\xBD\x8B"},
	    {1, "\x6C", 3, "\xEF\xBD\x8C"}, {1, "\x6D", 3, "\xEF\xBD\x8D"}, {1, "\x6E", 3, "\xEF\xBD\x8E"},
	    {1, "\x6F", 3, "\xEF\xBD\x8F"}, {1, "\x70", 3, "\xEF\xBD\x90"}, {1, "\x71", 3, "\xEF\xBD\x91"},
	    {1, "\x72", 3, "\xEF\xBD\x92"}, {1, "\x73", 3, "\xEF\xBD\x93"}, {1, "\x74", 3, "\xEF\xBD\x94"},
	    {1, "\x75", 3, "\xEF\xBD\x95"}, {1, "\x76", 3, "\xEF\xBD\x96"}, {1, "\x77", 3, "\xEF\xBD\x97"},
	    {1, "\x78", 3, "\xEF\xBD\x98"}, {1, "\x79", 3, "\xEF\xBD\x99"}, {1, "\x7A", 3, "\xEF\xBD\x9A"},
	    {1, "\x7B", 2, "\xC3\xA6"},     {1, "\x7C", 2, "\xC3\xB8"},     {1, "\x7D", 2, "\xC3\xA5"},
	    {1, "\x7E", 2, "\xC3\xBC"},     {1, "\x7F", 1, "\x7F"},
	};
	static void Register(const DBConfig &config) {
		const Ibm_1105_p100_2003ToUtf generated_function;
		const EncodingFunction function(generated_function.name, GeneratedEncodedFunction::Decode,
		                                generated_function.max_bytes_per_byte, generated_function.lookup_bytes,
		                                reinterpret_cast<uintptr_t>(&ibm_1105_P100_2003_to_utf8),
		                                std::size(ibm_1105_P100_2003_to_utf8));
		config.RegisterEncodeFunction(function);
	}
};
} // namespace duckdb_encodings
} // namespace duckdb
