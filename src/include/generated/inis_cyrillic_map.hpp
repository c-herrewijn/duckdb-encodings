//===----------------------------------------------------------------------===//
//
//                         DuckDB - Encodings
//
// generated/inis_cyrillic_map.hpp
//
//
//===----------------------------------------------------------------------===//

// !!!!!!!
// WARNING: this file is autogenerated by scripts/converter.py, manual changes will be overwritten
// !!!!!!!

#pragma once

#include "duckdb/main/config.hpp"
#include "duckdb/function/encoding_function.hpp"
#include "generated_encoded_function.hpp"

namespace duckdb {
namespace duckdb_encodings {

class Inis_cyrillicToUtf {
public:
	Inis_cyrillicToUtf() {};
	const idx_t lookup_bytes = 1;
	const idx_t max_bytes_per_byte = 3;
	const string name = "INIS_CYRILLIC";
	// Generated from: glibc-INIS_CYRILLIC-2.1.2.ucm
	static constexpr map_entry INIS_CYRILLIC_to_utf8[] = {
	    {1, "\x00", 1, "\x00"},         {1, "\x01", 1, "\x01"},         {1, "\x02", 1, "\x02"},
	    {1, "\x03", 1, "\x03"},         {1, "\x04", 1, "\x04"},         {1, "\x05", 1, "\x05"},
	    {1, "\x06", 1, "\x06"},         {1, "\x07", 1, "\x07"},         {1, "\x08", 1, "\x08"},
	    {1, "\x09", 1, "\x09"},         {1, "\x0A", 1, "\x0A"},         {1, "\x0B", 1, "\x0B"},
	    {1, "\x0C", 1, "\x0C"},         {1, "\x0D", 1, "\x0D"},         {1, "\x0E", 1, "\x0E"},
	    {1, "\x0F", 1, "\x0F"},         {1, "\x10", 1, "\x10"},         {1, "\x11", 1, "\x11"},
	    {1, "\x12", 1, "\x12"},         {1, "\x13", 1, "\x13"},         {1, "\x14", 1, "\x14"},
	    {1, "\x15", 1, "\x15"},         {1, "\x16", 1, "\x16"},         {1, "\x17", 1, "\x17"},
	    {1, "\x18", 1, "\x18"},         {1, "\x19", 1, "\x19"},         {1, "\x1A", 1, "\x1A"},
	    {1, "\x1B", 1, "\x1B"},         {1, "\x1C", 1, "\x1C"},         {1, "\x1D", 1, "\x1D"},
	    {1, "\x1E", 1, "\x1E"},         {1, "\x1F", 1, "\x1F"},         {1, "\x20", 1, "\x20"},
	    {1, "\x2C", 3, "\xE2\x88\x9A"}, {1, "\x2E", 3, "\xE2\x86\x92"}, {1, "\x2F", 3, "\xE2\x88\xAB"},
	    {1, "\x30", 2, "\xCE\xB1"},     {1, "\x31", 2, "\xCE\xB2"},     {1, "\x32", 2, "\xCE\xB3"},
	    {1, "\x33", 2, "\xCE\xB4"},     {1, "\x34", 2, "\xCE\xA3"},     {1, "\x35", 2, "\xCE\xBC"},
	    {1, "\x36", 2, "\xCE\xBD"},     {1, "\x37", 2, "\xCF\x89"},     {1, "\x38", 2, "\xCF\x80"},
	    {1, "\x39", 2, "\xCE\x9E"},     {1, "\x3A", 2, "\xCE\x94"},     {1, "\x3B", 2, "\xCE\x9B"},
	    {1, "\x3C", 2, "\xCE\xA9"},     {1, "\x3D", 2, "\xD0\xAA"},     {1, "\x3E", 3, "\xE2\x81\xBB"},
	    {1, "\x3F", 3, "\xE2\x81\xBA"}, {1, "\x40", 2, "\xD1\x8E"},     {1, "\x41", 2, "\xD0\xB0"},
	    {1, "\x42", 2, "\xD0\xB1"},     {1, "\x43", 2, "\xD1\x86"},     {1, "\x44", 2, "\xD0\xB4"},
	    {1, "\x45", 2, "\xD0\xB5"},     {1, "\x46", 2, "\xD1\x84"},     {1, "\x47", 2, "\xD0\xB3"},
	    {1, "\x48", 2, "\xD1\x85"},     {1, "\x49", 2, "\xD0\xB8"},     {1, "\x4A", 2, "\xD0\xB9"},
	    {1, "\x4B", 2, "\xD0\xBA"},     {1, "\x4C", 2, "\xD0\xBB"},     {1, "\x4D", 2, "\xD0\xBC"},
	    {1, "\x4E", 2, "\xD0\xBD"},     {1, "\x4F", 2, "\xD0\xBE"},     {1, "\x50", 2, "\xD0\xBF"},
	    {1, "\x51", 2, "\xD1\x8F"},     {1, "\x52", 2, "\xD1\x80"},     {1, "\x53", 2, "\xD1\x81"},
	    {1, "\x54", 2, "\xD1\x82"},     {1, "\x55", 2, "\xD1\x83"},     {1, "\x56", 2, "\xD0\xB6"},
	    {1, "\x57", 2, "\xD0\xB2"},     {1, "\x58", 2, "\xD1\x8C"},     {1, "\x59", 2, "\xD1\x8B"},
	    {1, "\x5A", 2, "\xD0\xB7"},     {1, "\x5B", 2, "\xD1\x88"},     {1, "\x5C", 2, "\xD1\x8D"},
	    {1, "\x5D", 2, "\xD1\x89"},     {1, "\x5E", 2, "\xD1\x87"},     {1, "\x5F", 2, "\xD1\x8A"},
	    {1, "\x60", 2, "\xD0\xAE"},     {1, "\x61", 2, "\xD0\x90"},     {1, "\x62", 2, "\xD0\x91"},
	    {1, "\x63", 2, "\xD0\xA6"},     {1, "\x64", 2, "\xD0\x94"},     {1, "\x65", 2, "\xD0\x95"},
	    {1, "\x66", 2, "\xD0\xA4"},     {1, "\x67", 2, "\xD0\x93"},     {1, "\x68", 2, "\xD0\xA5"},
	    {1, "\x69", 2, "\xD0\x98"},     {1, "\x6A", 2, "\xD0\x99"},     {1, "\x6B", 2, "\xD0\x9A"},
	    {1, "\x6C", 2, "\xD0\x9B"},     {1, "\x6D", 2, "\xD0\x9C"},     {1, "\x6E", 2, "\xD0\x9D"},
	    {1, "\x6F", 2, "\xD0\x9E"},     {1, "\x70", 2, "\xD0\x9F"},     {1, "\x71", 2, "\xD0\xAF"},
	    {1, "\x72", 2, "\xD0\xA0"},     {1, "\x73", 2, "\xD0\xA1"},     {1, "\x74", 2, "\xD0\xA2"},
	    {1, "\x75", 2, "\xD0\xA3"},     {1, "\x76", 2, "\xD0\x96"},     {1, "\x77", 2, "\xD0\x92"},
	    {1, "\x78", 2, "\xD0\xAC"},     {1, "\x79", 2, "\xD0\xAB"},     {1, "\x7A", 2, "\xD0\x97"},
	    {1, "\x7B", 2, "\xD0\xA8"},     {1, "\x7C", 2, "\xD0\xAD"},     {1, "\x7D", 2, "\xD0\xA9"},
	    {1, "\x7E", 2, "\xD0\xA7"},     {1, "\x7F", 1, "\x7F"},
	};
	static void Register(const DBConfig &config) {
		const Inis_cyrillicToUtf generated_function;
		const EncodingFunction function(generated_function.name, GeneratedEncodedFunction::Decode,
		                                generated_function.max_bytes_per_byte, generated_function.lookup_bytes,
		                                reinterpret_cast<uintptr_t>(&INIS_CYRILLIC_to_utf8),
		                                std::size(INIS_CYRILLIC_to_utf8));
		config.RegisterEncodeFunction(function);
	}
};
} // namespace duckdb_encodings
} // namespace duckdb
